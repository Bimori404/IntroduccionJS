--------- CAPITULO 1 ---------

-> ¿Que es JavaScript?

    Lenguaje de programacion
    Interpretado
    Orientado a objetos
    Imperativo -> (linea a linea)
    Case sensitive -> ( uppercase y lowercase ) { sensible a mayus y minus }
    Basado en prototipos / instancias / classless
    Tipado debil -> ( las variables pueden contener cualquier tipo de datos en cualquier momento )
    Lenguaje dinamico -> ( La var no se ajusta al dato, el dato se ajusta a la var )

    Esta basado en ECMASCTRIPT (5.1 y 6, 7, 8, Next)
        ECMAScript es el nombre oficial de la especificación de JavaScript.
        La especificación define la sintaxis y el comportamiento del lenguaje de programación

-> ¿Para que se usa?

    Principalmente para el dinamismo de los sitios web
    Tecnologia backend trabajando con NodeJS
    Tecnologia frontend trabajando con Angular, React o VueJS

-> Formas de enlazar JavaScript

    En linea
        <h1 onclick="alert('hola')"> click </h1>

    Como contenido en una etiqueta <script></script>
        <h1> click </h1>
        <script type="text/javascript">
            alert('hola')
        </script>

    Como contenido en un archivo de formato .js
        <script src="codigo.js"></script>

-> Variables ( Espacio guardado en memoria )

    Concepto
    Ejemplo
    Tipos de dato
        String = "HOLA"
        Number = 12
        Boolean = true | false

    Tipos de variables
        Let         (menos alcance)
        Var         (alcance global)
        Const       (no puede cambiar su valor)

    Casos especiales de datos
        Undefined   (existe pero no esta definida/inicializada)
        Null        
        NaN         (Not a Number)

    Crear multiples variables
        Let nombre1 = "Jorge", nombre2 = "Pedro";

    Scope
    Hoisting

    Pruebas con Prompt
        prompt("Ingresa tu mensaje"); { Es un alert() donde ingresas algun dato }

-> Operadores de JavaScript

    Operadores de Asignacion
        Asignacion          x = y
        Suma                x += y
        Resta               x -= y
        Multiplicacion      x *= y
        Divicion            x /= y
        Sobrante, Modulo    x %= y
        Exponente           x **= y

    Operadores Aritmeticos
        Suma                +
        Resta               -
        Multiplicacion      *
        Divicion            /
        Sobrante, Modulo    %
        Exponente           ** [ mas un valor numerico ] 
        Incremento          ++ [ se suma de uno en uno ]
        Decremento          -- [ se resta de uno en uno ]

-> Concatenacion

    Con el signo +
    Con backticks o la variable ${} 

-> Backticks o Acento grabe

    [alt+96] -> ``
    [ctrl+alt+}] -> ``

    Esto sirve para poner variables sin utilizar el +, comillas("", '') o codigo HTML y evitar errores

->  Esacape (de comillas simples o comilas dobles)

    " 'Escape de comillas simples' "
    ' "Escape de comillas dobles"  '

-> Operadores (Intermedio)

    Operadores de comparacion
        Igualdad            a ==  b
        Desigualdad         a !=  b
        Identidad           a === b [ Esto verifica que sea el mismo valor y el mimos tipo de dato ]
        No-Identidad        a !== b
        Mayor que           a  >  b
        Mayor igual que     a >=  b
        Menor que           a  <  b
        Menor igual que     a <=  b

    Operadores logicos [ TRUE o FALSE ]
        AND     &&  [ true && true = true ; true && false = false ]
        OR      ||  [ true || true = true ; true || false = true ; false || false = false ]
        NOT     !   [ !true = false ; !false = true ]

-> Camel Case

    Frases o palabras compuestas [nombrePersona, parseInt(), .getElementById(), etc..]

-> Condicionales

    If ()
      Else If ()
    Else ()

--------- CAPITULO 2 ---------

-> Arrays

    frutas = ["banana","uva","pera"]
    document.write(frutas[2])

    frutas = ["banana","uva","pera"]
    fruta = frutas[0]
    document.write(fruta)

-> Arrays asociativos

    let pc1 = {
        nombre: "SamuelPC",
        prosesador: "amd",
        ram: "16gb",
        espacio: "500gb"
    };
    document.write(pc1["nombre"])

-> Bucles e iteracion

    Sentencia while y break

        let numero = 0
        while (numero <br  20) {
            numero++
            document.write(numero +"<br>")
            if (numero == 10) {
                break; [ termina el bucle en el valor indicado en el condicional ; '10' ]
            }
        }

    Sentencia do while 
    
        let i = 0;
        do {
            console.log(i);
            i++;
        } while (i < 5);

    Sentencia for y continue
    
        for (let i = 0; i <br 6; i++) {
            if (i == 3) {
                continue; [ salta el valor indicado en el condicional ; '3' ]
            }
            document.write(i +"<br>")
        }

    Sentencia for in
    [ Devuelve la posicion en la que estan los elementos ]

        let animales = ["gato","perro","pez"]
        for (animal in animales) {
            document.write(animal + "<br>")
        }
        document.write("--------------")
        for (animal in animales) {
            document.write(animales[animal] + "<br>")
        }   

    Sentencia for of
    [ Devuelve el valor de los elementos ]

        let animales = ["gato","perro","pez"]
        for (animal of animales) {
            document.write(animal + "<br>")
        }

    Sentencia label
    [ utiliza para etiquetar una declaración, lo que permite identificar un bloque de código y referirse a él desde otras partes ]

        [ break con label ]
        outerLoop: // Etiqueta del bucle externo
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (i === 1 && j === 1) {
                    break outerLoop; // Sale del bucle externo
                }
                console.log(`i = ${i}, j = ${j}`);
            }
        }

        [ continue con label ]
        outerLoop: // Etiqueta del bucle externo
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (i === 1 && j === 1) {
                    continue outerLoop; // Salta a la siguiente iteración del bucle externo
                }
                console.log(`i = ${i}, j = ${j}`);
            }
        }

-> ForEach
    
    es un método que se usa comúnmente en arrays y otras estructuras de datos iterables. Se 
    ejecuta una vez para cada elemento de un array, sin modificar el array original

    Sintaxis y usos
        
        const numbers = [1, 2, 3, 4, 5];
        numbers.forEach(function(num) {
            console.log(num * 2); // Multiplica cada número por 2
        });

    Ventaja respecto a 'for'

        Sintaxis más simple. No necesitas gestionar manualmente los índices ni el ciclo

        array.forEach(el => console.log(el));

    Desventajas (break, continue)

        A diferencia de un bucle for tradicional, no puedes usar break para salir 
        prematuramente del ciclo, ni continue para saltar a la siguiente iteración

        A diferencia de otros métodos como map, forEach no retorna un array modificado

        const arr = [1, 2, 3, 4, 5];
        arr.forEach(num => {
            if (num === 3) break;  // Esto generará un error
            console.log(num);
        });

-> Funciones

    Crear funciones y llamarlas

        function saludar () {
            respuesta = prompt ("Hola, como tas");
            if (respuesta == "bien") {
                alert("me alegro")
            } else {
                alert("una pena")
            }
        }
        saludar()

    Return

        function regresarSaludo () {
            alert("hola");
            return "la funcion se ejecuto bien";
        }
        let saludo = regresarSaludo();
        document.write(saludo)

    Parametros

        let num1 = 32
        let num2 = 12
        function suma () {
            let res = num1 + num2
            document.write(res)
        }
        suma()

    Scope

        [ Ejemplo 1 ]
            function suma (num1, num2) {
                let res = num1 + num2
                document.write(res)
                document.write("<br>")
            }
            suma(12,32)
            suma(22,55)

        [ Ejemplo 2 ]
            function saludar (nombre) {
                frase = `hola ${nombre} , como estas?` 
            }
            saludar("sam")
            document.write(frase)

    Funciones flecha

        const saludar = nombre => {
        let frase = `hola ${nombre}, como estas?`;
            document.write(frase);
        }
        saludar("sam");

--------- CAPITULO 3 ---------

-> P.O.O.
    
    Definicion
        Es un oparadigma de programacion, para desarrollar de una mejor forma

-> Conceptos basicos
    
    Clase
        En programacion es un arcgivo donde se escribe codigo, el cual puede 
        funcionar como la logica o como el diseño

    Objeto
        Un objeto es una entidad dentro de un programa que representa una
        instancia concreta de una clase. Un objeto es algo que se crea a 
        partir de la clase
        
    Atributo
        Las caracteristicas del objeto

    Metodo
        Cosas que puede hacer el objeto

    Constructor
        Funcion obligatoria de la clase, usado para crear los parametros y
        las propiedades del objeto

    instancias
        Una instancia es cuando creas algo a partir de un molde o modelo. Si 
        tienes un molde para hacer galletas, cada galleta que hagas con ese
        molde sería una instancias

-> Pilares fundamentales de POO
    
    Abstraccion
        Simplificar lo mas que se pueda un objeto, obteniendo un resumen de lo mas importante

    Encapsulamiento
        Es como poner una protección a los datos de un objeto para que no se puedan modificar directamente

    Polimorfismo
        Es el comportamiento del objeto ante el mismo metodo dependiendo de sus propiedades

    Herencia [ extends ]
        es cuando una clase toma las características de otra clase. Si tienes una categoría general 
        llamada "Animal", puedes crear otra más específica llamada "Perro" que copie todo lo que "Animal" 
        tiene, pero además puede agregar cosas nuevas

-> Otros conceptos
    
    Modularidad
        Separar en partes una problematica

    Metodos estaticos [static]
        se refiere a algo que pertenece a la clase en general y no a instancias específicas de esa 
        clase. En pocas palabras, es algo que puedes usar sin necesidad de crear un objeto

    Metodos accesores [ get : set ]
        getters
            Se utilizan para obtener un valor
       
        setters
            Se utilizan para modificar o definirlo

-> Ejemplo

    class Animal {
        /* Abstraccion */
        constructor(especie, edad, color) { /* parametros */
            /* propiedades */
            this.raza = especie;
            this.anios = edad;
            this.pelaje = color;
            this.info = `Soy un ${this.raza}, tengo ${this.anios} años y soy de color ${this.pelaje}`;
        }
        /* metodo */
        verinfo() {
            document.write(this.info);
        }
        /* mejamos polimorfismo */
        ladrar() {
            if (this.raza == "perro") {
                document.write("wow!");
            }  else {
                document.write("Esto no es un perro, es un "+ this.raza);
            }   
        }
    }
    /* instanciamos la clase como objeto */
    const perro = new Animal("perro",5,"rojo");
    /* sin parametros asignaddos */
    document.write(perro); '[object Object]'
    /* con parametros asignaddos */
    document.write(perro.pelaje); 'rojo'
    document.write(perro.info); 'Soy un perro, tengo 5 años y soy de color rojo'
    /* Mostramos la info usando el metodo */
    perro.verinfo(); 'Soy un perro, tengo 5 años y soy de color rojo'


    /* Manejamos herencia */
    clase Perro extends Animal {
        constructor(especie, edad, razaPerro) {
            super(especie, edad);
            this.razaPerro= razaPerro;
        }
        ladrar() {
            document.write("wow!);
        }
        /* metodo get */
        get getRaza() {
            return this.razaPerro;
        }   
        /* metodo set */
        set setRaza (newName) {
            this.razaPerro = newName;
        }
    }
    const miperro = new Perro("perro",5,"marron", "doberman");
    miperro.verinfo(); 'Soy un perro, tengo 5 años y soy de color rojo'
    miperro.ladrar(); 'wow!'
    document.write(miperro.getRaza):
    miperro.setRaza = "pedro"

-------  CAPITULO 4  --------

-> Metdos de cadena

    concat()
        Junta dos o mas cadenas y retorna una nueva

    Utilizadas para buscar y devolver un valor
        startsWith()
            Si una cadena comienza con los caracteres de otra cadena devuelve true, si no devuelve 
            false

        endsWith()
            Si una cadena termina con los caracteres de otra cadena devuelve true, si no devuelve 
            false

        includes()
            Si una cadena puede encontrarse dentro de otra cadena devuelve true, si no devuelve 
            false

        indexOf()
            Duevuelve el indice del primer caracter de la cadena, si no existe devuelve -1
        
        lastIndexOf()
            Duevuelve el ultimo indice del primer caracter de la cadena, si no existe devuelve -1

    Utilizadas para modificar un valor
        padStart()
            [Propuesta] Rellena la cadena al principio con los caracteres deseados

        padEnd()
            [Propuesta] Rellena la cadena al final con los caracteres deseados
        
        repeat()
            Devuelve la cadena las veces que se le indique

    Otras maneras para modificar un valor
        split()
            Divide la cadena como se le indique

        substring()
            Nos retorna un pedazo de la cadena que seleccionemos

        toLowerCase()
            Convierte una cadena a minuscula
        
        toUpperCase()
            Convierte una cadena a mayuscula

        toString()
            Función que convierte un objeto en un texto para que puedas verlo como una cadena
        
        trim()
            Elimina los espacion en blanco al inicio y final de una cadena

        trimEnd()
            Elimina los espacion en blanco al final de una cadena
        
        trimStart()
            Elimina los espacion en blanco al inicio de una cadena

        valueOf()
            simplemente devuelve el contenido del texto sin cambiar nada. Es útil cuando tienes 
            un objeto y quieres convertirlo a su forma de texto básico. También se usa para 
            convertir otros tipos de datos, como números, a texto
    
-> Arrays

    Transformadores
        pop()
            Elimina el ultimo elemento de un array y lo devuelve

        shift()
            Elimina el primer elemento de un array y lo devuelve

        push()
            Agrega un elemento al final del array

        reverse()
            Invierte el orden de los elementos de un array

        unshift()
            Agrega mas elementos al inicio y devuelve la nueva longitud

        sort()
            Ordena los elementos y lo devuelve ordenado

        splice()
            Cambia el contenido eliminando elementos existentes y/o agregando nuevos elementos

    Accesores
        join()
            Une todos los elementos de una matriz y los devuelve como cadena

        slice()
            Usado para copiar una parte de una lista, arreglo o cadena, sin cambiar el original. 
            Es necesario indicar dónde empezar y dónde terminar, para que devuela lo deseado
            [ Metodos ya vistos en cadenas: toString, indexOf, lastIndexOf, includes ]
        
    Repeticion
        filter()
            Crea un nuevo array con los elementos que cumplan la condicion

            let numeros = ["uno","dos","tres"]
            numeros.filter(
                numero => document.write(
                    numero + "</br>"
                ))

            Resultado:
                uno
                dos
                tres

        forEach()
            Ejecuta la funcion indicada una vez por cada elemento del array 
            [ veace en el cap 1 ]

-> Objeto Math [ Basico ]

    Metodos
        sqrt()
        cbrt()
        max()
        min()
        random()
        round()
        fround()
        flor()
        trunc()

    Propiedades
        PI
        SQRT1_2
        SQRT2

        E
        LN2
        LN10
        LOG2E
        LOG10E

--------  CAPITULO 5 ---------

--------  CAPITULO 6 ---------