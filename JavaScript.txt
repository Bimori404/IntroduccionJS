Introduccion, Fundamentos & Profundización

--------- CAPITULO 1 ---------

-> ¿Que es JavaScript?

    Lenguaje de programacion
    Interpretado
    Orientado a objetos
    Imperativo -> (linea a linea)
    Case sensitive -> ( uppercase y lowercase ) { sensible a mayus y minus }
    Basado en prototipos / instancias / classless
    Tipado debil -> ( las variables pueden contener cualquier tipo de datos en cualquier momento )
    Lenguaje dinamico -> ( La var no se ajusta al dato, el dato se ajusta a la var )

    Esta basado en ECMASCTRIPT (5.1 y 6, 7, 8, Next)
        ECMAScript es el nombre oficial de la especificación de JavaScript.
        La especificación define la sintaxis y el comportamiento del lenguaje de programación

-> ¿Para que se usa?

    Principalmente para el dinamismo de los sitios web
    Tecnologia backend trabajando con NodeJS
    Tecnologia frontend trabajando con Angular, React o VueJS

-> Formas de enlazar JavaScript

    En linea
        <h1 onclick="alert('hola')"> click </h1>

    Como contenido en una etiqueta <script></script>
        <h1> click </h1>
        <script type="text/javascript">
            alert('hola')
        </script>

    Como contenido en un archivo de formato .js
        <script src="codigo.js"></script>

-> Variables ( Espacio guardado en memoria )

    Concepto
    Ejemplo
    Tipos de dato
        String = "HOLA"
        Number = 12
        Boolean = true | false

    Tipos de variables
        Let         (menos alcance)
        Var         (alcance global)
        Const       (no puede cambiar su valor)

    Casos especiales de datos
        Undefined   (existe pero no esta definida/inicializada)
        Null        
        NaN         (Not a Number)

    Crear multiples variables
        Let nombre1 = "Jorge", nombre2 = "Pedro";

    Scope
    Hoisting

    Pruebas con Prompt
        prompt("Ingresa tu mensaje"); { Es un alert() donde ingresas algun dato }

-> Operadores de JavaScript

    Operadores de Asignacion
        Asignacion          x = y
        Suma                x += y
        Resta               x -= y
        Multiplicacion      x *= y
        Divicion            x /= y
        Sobrante, Modulo    x %= y
        Exponente           x **= y

    Operadores Aritmeticos
        Suma                +
        Resta               -
        Multiplicacion      *
        Divicion            /
        Sobrante, Modulo    %
        Exponente           ** [ mas un valor numerico ] 
        Incremento          ++ [ se suma de uno en uno ]
        Decremento          -- [ se resta de uno en uno ]

-> Concatenacion

    Con el signo +
    Con backticks o la variable ${} 

-> Backticks o Acento grabe

    [alt+96] -> ``
    [ctrl+alt+}] -> ``

    Esto sirve para poner variables sin utilizar el +, comillas("", '') o codigo HTML y evitar errores

->  Esacape (de comillas simples o comilas dobles)

    " 'Escape de comillas simples' "
    ' "Escape de comillas dobles"  '

-> Operadores (Intermedio)

    Operadores de comparacion
        Igualdad            a ==  b
        Desigualdad         a !=  b
        Identidad           a === b [ Esto verifica que sea el mismo valor y el mimos tipo de dato ]
        No-Identidad        a !== b
        Mayor que           a  >  b
        Mayor igual que     a >=  b
        Menor que           a  <  b
        Menor igual que     a <=  b

    Operadores logicos [ TRUE o FALSE ]
        AND     &&  [ true && true = true ; true && false = false ]
        OR      ||  [ true || true = true ; true || false = true ; false || false = false ]
        NOT     !   [ !true = false ; !false = true ]

-> Camel Case

    Frases o palabras compuestas [nombrePersona, parseInt(), .getElementById(), etc..]

-> Condicionales

    If ()
      Else If ()
    Else ()

--------- CAPITULO 2 ---------

-> Arrays

    frutas = ["banana","uva","pera"]
    document.write(frutas[2])

    frutas = ["banana","uva","pera"]
    fruta = frutas[0]
    document.write(fruta)

-> Arrays asociativos

    let pc1 = {
        nombre: "SamuelPC",
        prosesador: "amd",
        ram: "16gb",
        espacio: "500gb"
    };
    document.write(pc1["nombre"])

-> Bucles e iteracion

    Sentencia while y break

        let numero = 0
        while (numero <br  20) {
            numero++
            document.write(numero +"<br>")
            if (numero == 10) {
                break; [ termina el bucle en el valor indicado en el condicional ; '10' ]
            }
        }

    Sentencia do while 
    
        let i = 0;
        do {
            console.log(i);
            i++;
        } while (i < 5);

    Sentencia for y continue
    
        for (let i = 0; i <br 6; i++) {
            if (i == 3) {
                continue; [ salta el valor indicado en el condicional ; '3' ]
            }
            document.write(i +"<br>")
        }

    Sentencia for in
    [ Devuelve la posicion en la que estan los elementos ]

        let animales = ["gato","perro","pez"]
        for (animal in animales) {
            document.write(animal + "<br>")
        }
        document.write("--------------")
        for (animal in animales) {
            document.write(animales[animal] + "<br>")
        }   

    Sentencia for of
    [ Devuelve el valor de los elementos ]

        let animales = ["gato","perro","pez"]
        for (animal of animales) {
            document.write(animal + "<br>")
        }

    Sentencia label
    [ utiliza para etiquetar una declaración, lo que permite identificar un bloque de código y referirse a él desde otras partes ]

        [ break con label ]
        outerLoop: // Etiqueta del bucle externo
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (i === 1 && j === 1) {
                    break outerLoop; // Sale del bucle externo
                }
                console.log(`i = ${i}, j = ${j}`);
            }
        }

        [ continue con label ]
        outerLoop: // Etiqueta del bucle externo
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (i === 1 && j === 1) {
                    continue outerLoop; // Salta a la siguiente iteración del bucle externo
                }
                console.log(`i = ${i}, j = ${j}`);
            }
        }

-> ForEach
    
    es un método que se usa comúnmente en arrays y otras estructuras de datos iterables. Se 
    ejecuta una vez para cada elemento de un array, sin modificar el array original

    Sintaxis y usos
        
        const numbers = [1, 2, 3, 4, 5];
        numbers.forEach(function(num) {
            console.log(num * 2); // Multiplica cada número por 2
        });

    Ventaja respecto a 'for'

        Sintaxis más simple. No necesitas gestionar manualmente los índices ni el ciclo

        array.forEach(el => console.log(el));

    Desventajas (break, continue)

        A diferencia de un bucle for tradicional, no puedes usar break para salir 
        prematuramente del ciclo, ni continue para saltar a la siguiente iteración

        A diferencia de otros métodos como map, forEach no retorna un array modificado

        const arr = [1, 2, 3, 4, 5];
        arr.forEach(num => {
            if (num === 3) break;  // Esto generará un error
            console.log(num);
        });

-> Funciones

    Crear funciones y llamarlas

        function saludar () {
            respuesta = prompt ("Hola, como tas");
            if (respuesta == "bien") {
                alert("me alegro")
            } else {
                alert("una pena")
            }
        }
        saludar()

    Return

        function regresarSaludo () {
            alert("hola");
            return "la funcion se ejecuto bien";
        }
        let saludo = regresarSaludo();
        document.write(saludo)

    Parametros

        let num1 = 32
        let num2 = 12
        function suma () {
            let res = num1 + num2
            document.write(res)
        }
        suma()

    Scope

        [ Ejemplo 1 ]
            function suma (num1, num2) {
                let res = num1 + num2
                document.write(res)
                document.write("<br>")
            }
            suma(12,32)
            suma(22,55)

        [ Ejemplo 2 ]
            function saludar (nombre) {
                frase = `hola ${nombre} , como estas?` 
            }
            saludar("sam")
            document.write(frase)

    Funciones flecha

        const saludar = nombre => {
        let frase = `hola ${nombre}, como estas?`;
            document.write(frase);
        }
        saludar("sam");

--------- CAPITULO 3 ---------

-> P.O.O.
    
    Definicion
        Es un oparadigma de programacion, para desarrollar de una mejor forma

-> Conceptos basicos
    
    Clase
        En programacion es un arcgivo donde se escribe codigo, el cual puede 
        funcionar como la logica o como el diseño

    Objeto
        Un objeto es una entidad dentro de un programa que representa una
        instancia concreta de una clase. Un objeto es algo que se crea a 
        partir de la clase
        
    Atributo
        Las caracteristicas del objeto

    Metodo
        Cosas que puede hacer el objeto

    Constructor
        Funcion obligatoria de la clase, usado para crear los parametros y
        las propiedades del objeto

    instancias
        Una instancia es cuando creas algo a partir de un molde o modelo. Si 
        tienes un molde para hacer galletas, cada galleta que hagas con ese
        molde sería una instancias

-> Pilares fundamentales de POO
    
    Abstraccion
        Simplificar lo mas que se pueda un objeto, obteniendo un resumen de lo mas importante

    Encapsulamiento
        Es como poner una protección a los datos de un objeto para que no se puedan modificar directamente

    Polimorfismo
        Es el comportamiento del objeto ante el mismo metodo dependiendo de sus propiedades

    Herencia [ extends ]
        es cuando una clase toma las características de otra clase. Si tienes una categoría general 
        llamada "Animal", puedes crear otra más específica llamada "Perro" que copie todo lo que "Animal" 
        tiene, pero además puede agregar cosas nuevas

-> Otros conceptos
    
    Modularidad
        Separar en partes una problematica

    Metodos estaticos [static]
        se refiere a algo que pertenece a la clase en general y no a instancias específicas de esa 
        clase. En pocas palabras, es algo que puedes usar sin necesidad de crear un objeto

    Metodos accesores [ get : set ]
        getters
            Se utilizan para obtener un valor
       
        setters
            Se utilizan para modificar o definirlo

-> Ejemplo

    class Animal {
        /* Abstraccion */
        constructor(especie, edad, color) { /* parametros */
            /* propiedades */
            this.raza = especie;
            this.anios = edad;
            this.pelaje = color;
            this.info = `Soy un ${this.raza}, tengo ${this.anios} años y soy de color ${this.pelaje}`;
        }
        /* metodo */
        verinfo() {
            document.write(this.info);
        }
        /* mejamos polimorfismo */
        ladrar() {
            if (this.raza == "perro") {
                document.write("wow!");
            }  else {
                document.write("Esto no es un perro, es un "+ this.raza);
            }   
        }
    }
    /* instanciamos la clase como objeto */
    const perro = new Animal("perro",5,"rojo");
    /* sin parametros asignaddos */
    document.write(perro); '[object Object]'
    /* con parametros asignaddos */
    document.write(perro.pelaje); 'rojo'
    document.write(perro.info); 'Soy un perro, tengo 5 años y soy de color rojo'
    /* Mostramos la info usando el metodo */
    perro.verinfo(); 'Soy un perro, tengo 5 años y soy de color rojo'


    /* Manejamos herencia */
    clase Perro extends Animal {
        constructor(especie, edad, razaPerro) {
            super(especie, edad);
            this.razaPerro= razaPerro;
        }
        ladrar() {
            document.write("wow!);
        }
        /* metodo get */
        get getRaza() {
            return this.razaPerro;
        }   
        /* metodo set */
        set setRaza (newName) {
            this.razaPerro = newName;
        }
    }
    const miperro = new Perro("perro",5,"marron", "doberman");
    miperro.verinfo(); 'Soy un perro, tengo 5 años y soy de color rojo'
    miperro.ladrar(); 'wow!'
    document.write(miperro.getRaza):
    miperro.setRaza = "pedro"

-------  CAPITULO 4  --------

-> Metdos de cadena

    concat()
        Junta dos o mas cadenas y retorna una nueva

    Utilizadas para buscar y devolver un valor
        startsWith()
            Si una cadena comienza con los caracteres de otra cadena devuelve true, si no devuelve 
            false

        endsWith()
            Si una cadena termina con los caracteres de otra cadena devuelve true, si no devuelve 
            false

        includes()
            Si una cadena puede encontrarse dentro de otra cadena devuelve true, si no devuelve 
            false

        indexOf()
            Duevuelve el indice del primer caracter de la cadena, si no existe devuelve -1
        
        lastIndexOf()
            Duevuelve el ultimo indice del primer caracter de la cadena, si no existe devuelve -1

    Utilizadas para modificar un valor
        padStart()
            [Propuesta] Rellena la cadena al principio con los caracteres deseados

        padEnd()
            [Propuesta] Rellena la cadena al final con los caracteres deseados
        
        repeat()
            Devuelve la cadena las veces que se le indique

    Otras maneras para modificar un valor
        split()
            Divide la cadena como se le indique

        substring()
            Nos retorna un pedazo de la cadena que seleccionemos

        toLowerCase()
            Convierte una cadena a minuscula
        
        toUpperCase()
            Convierte una cadena a mayuscula

        toString()
            Función que convierte un objeto en un texto para que puedas verlo como una cadena
        
        trim()
            Elimina los espacion en blanco al inicio y final de una cadena

        trimEnd()
            Elimina los espacion en blanco al final de una cadena
        
        trimStart()
            Elimina los espacion en blanco al inicio de una cadena

        valueOf()
            simplemente devuelve el contenido del texto sin cambiar nada. Es útil cuando tienes 
            un objeto y quieres convertirlo a su forma de texto básico. También se usa para 
            convertir otros tipos de datos, como números, a texto
    
-> Arrays

    Transformadores
        pop()
            Elimina el ultimo elemento de un array y lo devuelve

        shift()
            Elimina el primer elemento de un array y lo devuelve

        push()
            Agrega un elemento al final del array

        reverse()
            Invierte el orden de los elementos de un array

        unshift()
            Agrega mas elementos al inicio y devuelve la nueva longitud

        sort()
            Ordena los elementos y lo devuelve ordenado

        splice()
            Cambia el contenido eliminando elementos existentes y/o agregando nuevos elementos

    Accesores
        join()
            Une todos los elementos de una matriz y los devuelve como cadena

        slice()
            Usado para copiar una parte de una lista, arreglo o cadena, sin cambiar el original. 
            Es necesario indicar dónde empezar y dónde terminar, para que devuela lo deseado
            [ Metodos ya vistos en cadenas: toString, indexOf, lastIndexOf, includes ]
        
    Repeticion
        filter()
            Crea un nuevo array con los elementos que cumplan la condicion

            let numeros = ["uno","dos","tres"]
            numeros.filter(
                numero => document.write(
                    numero + "</br>"
                ))

            Resultado:
                uno
                dos
                tres

        forEach()
            Ejecuta la funcion indicada una vez por cada elemento del array 
            [ veace en el cap 1 ]

-> Objeto Math [ Basico ]

    Metodos
        sqrt()
            Devuelve la raiz cuadrada positiva de un numero

        cbrt()
            Devuelve la raiz cubica de un numero

        max()
            Devuelve el numero mayor

        min()
            Devuelve el numero menor

        random()
            Devuelve un numero pseudo-aleatorio entre 0 y 1

        round()
            Devuelve el valor redondeado mas cercano

        fround()
            Devuelve el valor float mas cercano

        floor()
            Devuelve el valor redondeado un número hacia abajo, es decir, al número entero más 
            cercano, menor o igual al valor dado
        
        trunc()
            Se utiliza para eliminar la parte decimal de un número y devolver solo la parte entera

    Propiedades
        PI
            Circunferencia de un circulo respecto a su diametro, aprox 3.1416

        SQRT1_2
            Representa la raíz cuadrada de 1/2, o aprox 0.707

        SQRT2
            Raiz cuadrada de 2, aprox 1.414

        E
            Constante de Euler, aprox 2.7182

        LN2
            Logaritmo natural de 2, aprox 0.639

        LN10
            Logaritmo natural de 10, aprox 2.303

        LOG2E
            Logaritmo de Euler con base 2, aprox 1.443

        LOG10E
            Logaritmo de Euler con base 10, aprox 0.434

--------  CAPITULO 5 ---------

->  Console (Consola de javascript)

        Es una herramienta muy útil que permite interactuar con el código JS de una
        página web directamente desde el navegador

        Mensaje en la consola:
            console.log("Hola, Mundo");

-> Métodos de registro en console

    assert()
        Lanza un mensaje de error en la consola si la expresión es false. Si la
        condición es true, no ocurre nada

    clear()
        Limpia todos los mensajes de la consola

    error()
        Muestra un mensaje de error en la consola

    info()
        Muestra un mensaje de información en la consola

    log()
        Es el método más usado para imprimir mensajes en la consola

    table()
        Muestra datos en forma de tabla. Es útil para representar arreglos o objetos

        const personas = [
                { nombre: "Samuel", edad: 25 },
                { nombre: "Nallely", edad: 23 }
            ];
        console.table(personas); // Mostrará los datos en una tabla en la consola

    warn()
        Muestra un mensaje de advertencia en la consola

    dir()
        Muestra una lista interactiva de las propiedades de un objeto, útil para 
        inspeccionar objetos de manera más detallada

        const persona = { nombre: "Samuel", edad: 25 };
        console.dir(persona); // Mostrará las propiedades del objeto

-> Métodos de conteo en console

    count()
        Lleva un conteo de cuántas veces se ha ejecutado un bloque de código o se ha
        llamado este método con una etiqueta específica

    countReset()
        Resetea el conteo de un contador con una etiqueta específica

-> Métodos de agrupación en console

    group()
        Crea un grupo para organizar mensajes. Todo lo que esté entre group() y groupEnd() 
        aparecerá anidado en la consola

    groupEnd()
        Finaliza un grupo creado por console.group()

    groupCollapsed()
        Crea un grupo colapsado por defecto. Puedes expandirlo manualmente en la consola

-> Métodos de temporización en console

    time()
        Inicia un temporizador para medir cuánto tarda en ejecutarse un bloque de código

    timeEnd()
        Finaliza un temporizador iniciado con console.time() y muestra el tiempo 
        transcurrido

    timeLog()
        Registra el tiempo actual de un temporizador sin detenerlo, permitiendo ver el
        progreso a lo largo del tiempo

--------  CAPITULO 6 ---------

-> El DOM (Document Object Model)

    Definicion
        interfaz de programación que representa la estructura de un documento HTML o XML 
        como un árbol jerárquico de nodos. Cada uno de estos nodos corresponde a partes del 
        documento como etiquetas, atributos o texto. Esto permite a los desarrolladores 
        interactuar y manipular la estructura, estilo y contenido de una página web de forma 
        dinámica mediante lenguajes de programación como JavaScript

    Concepto
        Convierte los documentos en una estructura navegable, donde los programadores pueden
        acceder a los diferentes elementos, modificarlos, agregar nuevos, o eliminarlo

        El DOM para este HTML sería representado como un árbol de nodos de la siguiente manera
            Document
            ├── html
            │   ├── head
            │   │   └── title (Texto: "Mi página")
            │   ├── body
            │   │   ├── h1 (Texto: "Título")
            │   │   └── p (Texto: "Este es un párrafo")

    Nodo
        El DOM está compuesto por varios tipos de nodos, que son las unidades básicas que 
        conforman su estructura

        Document
            El nodo document es la raíz del DOM. Representa el documento entero y es el 
            punto de entrada para acceder a todos los elementos en la página

        Element
            Los nodos de elemento representan las etiquetas HTML. Cada etiqueta en el 
            HTML se convierte en un nodo de elemento en el DOM

            <div id="contenedor"></div>
            const elemento = document.getElementById("contenedor");
            console.log(elemento); // Imprime el elemento <div> con id "contenedor"

        Text
            Los nodos de texto contienen el contenido textual de un elemento HTML. Estos 
            nodos son hijos de nodos de elemento

        Attribute
            Representan los atributos de los elementos HTML. A diferencia de los nodos 
            de texto y elemento, los atributos no son hijos directos del nodo de elemento,
            pero se pueden acceder mediante las propiedades del elemento

            <a href="https://www.example.com" title="Ir a ejemplo">Enlace</a>
            const enlace = document.querySelector("a");
            console.log(enlace.getAttribute("href")); // Imprime "https://www.example.com"

        Comentarios
            Además de los elementos, texto y atributos, el DOM también incluye nodos de 
            comentarios (<!-- comentario -->)

-> Métodos de selección de elementos (Document)

    getElementById()
        Selecciona el elemento con el id especificado. Este método solo devuelve un elemento, 
        ya que los identificadores (id) deben ser únicos dentro de un documento

        const elemento = document.getElementById(id);

    getElementByTagName()
        Selecciona todos los elementos con el nombre de etiqueta especificado (por ejemplo, 
        div, p, h1, etc.). Devuelve una colección HTML (similar a un array), por lo que 
        puedes acceder a elementos individuales mediante su índice

        const elementos = document.getElementsByTagName(nombreEtiqueta);

    querySellector()
        Selecciona el primer elemento que coincide con el selector CSS proporcionado. Este
        método es muy flexible, ya que permite usar cualquier selector de CSS 
        (#id, .clase, tag, etc.)

        const elemento = document.querySelector(selectorCSS);

    querySellectorAll()
        Selecciona todos los elementos que coinciden con el selector CSS proporcionado y
        devuelve una NodeList (similar a un array). A diferencia de getElementsByTagName(),
        esta colección puede ser iterada usando métodos como forEach()

    Ejemplo usando todos los métodos

        <div id="miDiv">Elemento con ID</div>
        <p class="texto">Texto 1</p>
        <p class="texto">Texto 2</p>
        <p class="texto">Texto 3</p>
        <script>
            // getElementById
            const div = document.getElementById("miDiv");
            console.log(div); // Devuelve el <div id="miDiv">

            // getElementsByTagName
            const parrafos = document.getElementsByTagName("p");
            console.log(parrafos); // Devuelve una colección de <p> (HTMLCollection)

            // querySelector
            const primerParrafo = document.querySelector(".texto");
            console.log(primerParrafo); // Devuelve el primer <p class="texto">

            // querySelectorAll
            const todosParrafos = document.querySelectorAll(".texto");
            todosParrafos.forEach(parrafo => console.log(parrafo)); // Devuelve todos los <p class="texto">
        </script>

-> Métodos de atributos de un elemento

    setAttribut()
        Establece o agrega un nuevo atributo al elemento especificado. Si el atributo
        ya existe, se actualiza su valor

        element.setAttribute(nombreAtributo, valorAtributo);

    getAttribut()
        Obtiene el valor de un atributo especificado en el elemento. Si el atributo
        no existe, devuelve null

        const valor = element.getAttribute(nombreAtributo);

    removeAttribut()
        Elimina un atributo especificado del elemento. Si el atributo no existe, 
        no hace nada

    Ejemplo usando todos los métodos

        <button id="miBoton" class="btn">Haz clic aquí</button>

        <script>
        const boton = document.getElementById("miBoton");

        // Establecer o cambiar un atributo con setAttribute()
        boton.setAttribute("title", "Este es un botón");  // Añade un título al botón
        boton.setAttribute("class", "btn btn-primary");   // Cambia la clase del botón

        // Obtener un atributo con getAttribute()
        const titulo = boton.getAttribute("title");
        console.log(titulo); // Devuelve "Este es un botón"

        // Eliminar un atributo con removeAttribute()
        boton.removeAttribute("class");  // Elimina la clase del botón
        </script>

-> Atributos globales

    class
        Define una o más clases CSS para el elemento. Las clases permiten aplicar 
        estilos específicos o interactuar con los elementos a través de JavaScript

        <div class="contenedor destacado">Contenido</div>
        <style> 
            .contenedor {
                padding: 10px;
            }
            .destacado {
                background-color: yellow;
            }
        </style>

    contenteditable
        Indica si el contenido del elemento puede ser editado por el usuario. Si
        se establece en true, el elemento se convierte en editable
        
        <p contenteditable="true">Puedes editar este texto</p>

    dir
        Especifica la dirección del texto dentro del elemento. Los valores posibles
        son ltr (de izquierda a derecha, el valor por defecto) y rtl (de derecha a
        izquierda, utilizado para idiomas como árabe o hebreo)

        <p dir="rtl">Este texto se mostrará de derecha a izquierda.</p>

    hidden
        Indica que el elemento no es relevante o visible en la página. Aunque el
        elemento existe en el DOM, no se muestra y no es accesible para el usuario

        <p hidden>Este párrafo está oculto.</p>

    id
        Define un identificador único para el elemento. El id es único dentro de
        un documento HTML, y se utiliza para identificar y manipular elementos con 
        JavaScript o CSS

        <h1 id="tituloPrincipal">Bienvenidos</h1>

    style
        Permite definir estilos en línea para el elemento mediante propiedades CSS. 
        Aunque es posible aplicar estilos directamente a los elementos, generalmente
        es preferible usar hojas de estilo CSS externas o internas para mantener el
        código más limpio

        <p style="color: red; font-size: 18px;">Este texto es rojo y más grande.</p>

    tabindex
        Define el orden de tabulación del elemento cuando se navega por la página
        utilizando el teclado (la tecla "Tab")

            * 0: El elemento es navegable según el orden natural
            * Valor positivo: Establece un orden de tabulación específico
            * -1: El elemento no es navegable usando "Tab"
        
        <input type="text" tabindex="2">
        <input type="text" tabindex="1">

    title
        Proporciona información adicional sobre el elemento, que generalmente se
        muestra como una sugerencia o "tooltip" cuando el usuario pasa el ratón por
        encima del elemento

-> Atributos de inputs

    className
        Asigna una o más clases CSS al elemento input. Este atributo es sinónimo de 
        class en HTML, pero en JavaScript se accede como className

        <input type="text" class="campo-formulario">
        <style>
            .campo-formulario {
                border: 1px solid black;
                padding: 5px;
            }
        </style>

    value
        Define el valor predefinido del campo de entrada. Si se usa en un formulario,
        también almacena el valor actual que el usuario ha ingresado

        <input type="text" value="Texto predeterminado">

    type
        Especifica el tipo de entrada que aceptará el campo. Este es uno de los 
        atributos más importantes, ya que define si el campo será de texto, contraseña,
        correo electrónico, archivo, entre otros

            * text: Entrada de texto
            * password: Entrada para contraseñas (los caracteres se muestran ocultos)
            * email: Valida que el texto ingresado sea un correo electrónico
            * file: Permite seleccionar archivos
            * number: Permite solo números

        <input type="email" placeholder="Ingresa tu correo electrónico">

    accept
        Utilizado principalmente con entradas de tipo file, este atributo especifica
        qué tipos de archivos son aceptados por el campo. Puedes restringir formatos
        específicos como imágenes, videos, o documentos

        <input type="file" accept="image/png, image/jpeg">

    form
        Asocia el campo de entrada a un formulario mediante su id, incluso si el campo
        de entrada no está dentro del mismo form. Esto es útil cuando necesitas tener 
        elementos separados pero vinculados al mismo formulario

        <form id="formulario1">
            <button type="submit">Enviar</button>
        </form>
        <input type="text" form="formulario1" placeholder="Texto fuera del formulario">

    minlength
        Especifica la cantidad mínima de caracteres que el usuario debe ingresar en el
        campo de texto. Si el valor ingresado es menor, el formulario no se enviará
        
        <input type="text" minlength="5" placeholder="Mínimo 5 caracteres">

    placeholder
        Define un texto de sugerencia que aparece en el campo de entrada antes de que el
         usuario comience a escribir. Es útil para proporcionar instrucciones sobre qué 
         tipo de datos debe ingresar el usuario

    required
        Indica que el campo es obligatorio. Si no se llena, el formulario no se enviará 
        y el navegador mostrará un mensaje de advertencia

-> Propiedad Style

    Usos
        Aplicar estilos dinámicos con JavaScript: En JavaScript, se puede modificar 
        cualquier propiedad CSS utilizando la propiedad style. Esto es útil cuando 
        necesitas cambiar el diseño o la apariencia de un elemento en respuesta a 
        eventos como clics, desplazamiento, o interacción del usuario

        Estilos en línea: Puedes aplicar estilos directamente dentro de la etiqueta HTML
        usando el atributo style, aunque no es recomendable en muchos casos debido a la 
        separación de responsabilidades entre el HTML y el CSS

    Ejemplos
        Estilos en línea en HTML
            <div style="background-color: yellow; color: red;">Texto con estilo en línea</div>

        Aplicar estilos con JavaScript
            <button onclick="cambiarColor()">Cambiar Color</button>
            <p id="parrafo">Este es un párrafo.</p>
            <script>
            function cambiarColor() {
                document.getElementById('parrafo').style.color = 'blue';
                document.getElementById('parrafo').style.fontSize = '20px';
            }
            </script>

    Propiedades Camel Case
        Cuando utilizas style con JavaScript, las propiedades CSS que contienen guiones (-)
        deben ser convertidas a Camel Case. En lugar de usar guiones, como es común en CSS,
        debes escribir las propiedades utilizando minúsculas en la primera palabra y 
        mayúsculas en las subsecuentes

-> Clases, classList y sus métodos

    Definicion
        ClassList es una interfaz utilizada para trabajar con las clases CSS de un elemento
        HTML de forma eficiente. Te permite agregar, quitar, alternar, y verificar clases
        sin necesidad de modificar directamente el atributo class

    add()
        Agrega una o más clases al elemento
        document.getElementById("miElemento").classList.add("nuevaClase");

    remove()
        Elimina una o más clases del elemento
        document.getElementById("miElemento").classList.remove("nuevaClase");

    item()
        Devuelve la clase en la posición especificada
        console.log(document.getElementById("miElemento").classList.item(0));

    contains()
        Verifica si el elemento tiene la clase especificada
        if (document.getElementById("miElemento").classList.contains("nuevaClase")) {
            console.log("El elemento tiene la clase");
        }

    replace()
        Reemplaza una clase por otra
        document.getElementById("miElemento").classList.replace("claseVieja", "claseNueva");

    toggle()
        Alterna la presencia de una clase. Si la clase existe, la elimina; si no, la agrega
        document.getElementById("miElemento").classList.toggle("nuevaClase");

-> Obtención y modificación de elementos

    textContent
        Modifica o obtiene el texto del elemento, incluyendo texto oculto por CSS

    innerText
        Modifica o obtiene el texto visible de un elemento (considera estilos CSS como display: none)

    outerText
        Modifica el texto visible y reemplaza el elemento completo

    innerHTML
        Inserta o modifica el HTML dentro del elemento

    outerHTML
        Inserta o modifica el HTML y reemplaza todo el elemento

-> Creación de elementos

    createElements()
        Crea un nuevo elemento HTML
        let nuevoDiv = document.createElement("div");

    createDocumentFragment()
        Crea un fragmento de documento que puede contener varios nodos. Útil para evitar 
        múltiples renderizados
        let fragmento = document.createDocumentFragment();

-> Obtención y modificacion de childs

    firstChild
        Devuelve el primer nodo hijo (puede ser un texto o un elemento)

    lastChild
        Devuelve el último nodo hijo

    firstElementChild
        Devuelve el primer hijo que es un elemento

    lastElementChild
        Devuelve el último hijo que es un elemento

    childNodes
        Devuelve una lista de todos los nodos hijos

    children
        Devuelve una lista de los hijos que son elementos

    Ejemplo usando los métodos
        <div id="container">
            <h1>Elemento principal</h1>
            <p id="primerParrafo">Este es el primer párrafo.</p>
            <p id="segundoParrafo">Este es el segundo párrafo.</p>
        </div>
        <script>           
            const container = document.getElementById("container");

            // Obtener el primer y último hijo
            const primerHijo = container.firstChild;
            const ultimoHijo = container.lastChild;
            console.log("Primer hijo (firstChild):", primerHijo);
            console.log("Último hijo (lastChild):", ultimoHijo);

            // Obtener el primer y último hijo que son elementos
            const primerElemento = container.firstElementChild;
            const ultimoElemento = container.lastElementChild;
            console.log("Primer hijo elemento (firstElementChild):", primerElemento);
            console.log("Último hijo elemento (lastElementChild):", ultimoElemento);

            // Obtener todos los nodos hijos
            const todosLosNodos = container.childNodes;
            console.log("Todos los nodos hijos (childNodes):", todosLosNodos);

            // Obtener solo los hijos que son elementos
            const soloElementos = container.children;
            console.log("Hijos que son elementos (children):", soloElementos);
        </script>

-> Métodos de childs (hijos)

    appendChild()
        Añade un nodo hijo al final

    replaceChild()
        Reemplaza un nodo hijo con otro

    removeChild()
        Elimina un nodo hijo

    hasChildNodes()
        Verifica si el nodo tiene hijos

    Ejemplo usando los métodos
        <div id="container">
            <h1>Elemento principal</h1>
            <p id="primerParrafo">Este es el primer párrafo.</p>
            <p id="segundoParrafo">Este es el segundo párrafo.</p>
        </div>
        <script>
            // Crear un nuevo elemento
            const nuevoParrafo = document.createElement("p");
            nuevoParrafo.textContent = "Este es un nuevo párrafo agregado con appendChild.";

            // Agregar el nuevo párrafo al final del contenedor
            container.appendChild(nuevoParrafo);

            // Reemplazar el segundo párrafo por otro
            const reemplazo = document.createElement("p");
            reemplazo.textContent = "Este párrafo ha reemplazado al segundo párrafo.";
            container.replaceChild(reemplazo, document.getElementById("segundoParrafo"));

            // Eliminar el primer párrafo
            const primerParrafo = document.getElementById("primerParrafo");
            container.removeChild(primerParrafo);

            // Verificar si el contenedor tiene nodos hijos
            const tieneHijos = container.hasChildNodes();
            console.log("¿El contenedor tiene nodos hijos?:", tieneHijos);
        </script>

-> Propiedades de parents (Padres)

    parentElement
        Devuelve el elemento padre de un nodo

    parentNode
        Devuelve el nodo padre

    Ejemplo usando los métodos
        <div id="container">
            <h1>Elemento principal</h1>
            <p id="primerParrafo">Este es el primer párrafo.</p>
            <p id="segundoParrafo">Este es el segundo párrafo.</p>
        </div>
        <script>
            // Obtener el elemento padre
            const padre = nuevoParrafo.parentElement;
            console.log("Elemento padre:", padre);

            // Obtener el nodo padre
            const nodoPadre = nuevoParrafo.parentNode;
            console.log("Nodo padre:", nodoPadre);
        </script>

-> Propiedades de siblings (Hermanos)

    nextSiblings
        Devuelve el siguiente nodo hermano (puede ser un texto o un elemento)

    previusSiblings
        Devuelve el nodo hermano anterior

    nextElementSiblings
        Devuelve el siguiente hermano que es un elemento

    previusElementSiblings
        Devuelve el hermano anterior que es un elemento

    Ejemplo usando los métodos
        <div id="container">
            <h1>Elemento principal</h1>
            <p id="primerParrafo">Este es el primer párrafo.</p>
            <p id="segundoParrafo">Este es el segundo párrafo.</p>
        </div>
        <script>
            // Siguiente hermano
            const siguienteHermano = nuevoParrafo.nextSibling;
            console.log("Siguiente nodo hermano:", siguienteHermano);

            // Hermano anterior
            const anteriorHermano = nuevoParrafo.previousSibling;
            console.log("Nodo hermano anterior:", anteriorHermano);

            // Siguiente hermano que es un elemento
            const siguienteElemento = nuevoParrafo.nextElementSibling;
            console.log("Siguiente hermano elemento:", siguienteElemento);

            // Hermano anterior que es un elemento
            const anteriorElemento = nuevoParrafo.previousElementSibling;
            console.log("Hermano elemento anterior:", anteriorElemento);
        </script>

-> Nodos, una propiedad extra

    closest()
        Devuelve el ancestro más cercano que coincide con el selector dado,
        o null si no encuentra uno
        
        let elemento = document.getElementById("miElemento");
        let closestDiv = elemento.closest("div");
        console.log(closestDiv);

    Ejemplo usando los métodos
        <div id="container">
            <h1>Elemento principal</h1>
            <p id="primerParrafo">Este es el primer párrafo.</p>
            <p id="segundoParrafo">Este es el segundo párrafo.</p>
        </div>
        <script>

            // Busca el ancestro más cercano con el selector "div"
            const divMasCercano = nuevoParrafo.closest("div");
            console.log("Ancestro más cercano con el selector 'div':", divMasCercano);
        </script>

-> Codigo (Obtencion y modificacion .... Nodos, propiedad extra)

    "
    <div id="container">
        <h1>Elemento principal</h1>
        <p id="primerParrafo">Este es el primer párrafo.</p>
        <p id="segundoParrafo">Este es el segundo párrafo.</p>
    </div>
    <script>
        // Obtención de hijos y modificación

        const container = document.getElementById("container");

        // Obtener el primer y último hijo
        const primerHijo = container.firstChild;
        const ultimoHijo = container.lastChild;
        console.log("Primer hijo (firstChild):", primerHijo);
        console.log("Último hijo (lastChild):", ultimoHijo);

        // Obtener el primer y último hijo que son elementos
        const primerElemento = container.firstElementChild;
        const ultimoElemento = container.lastElementChild;
        console.log("Primer hijo elemento (firstElementChild):", primerElemento);
        console.log("Último hijo elemento (lastElementChild):", ultimoElemento);

        // Obtener todos los nodos hijos
        const todosLosNodos = container.childNodes;
        console.log("Todos los nodos hijos (childNodes):", todosLosNodos);

        // Obtener solo los hijos que son elementos
        const soloElementos = container.children;
        console.log("Hijos que son elementos (children):", soloElementos);

        // Métodos de manipulación de hijos

        // Crear un nuevo elemento
        const nuevoParrafo = document.createElement("p");
        nuevoParrafo.textContent = "Este es un nuevo párrafo agregado con appendChild.";

        // Agregar el nuevo párrafo al final del contenedor
        container.appendChild(nuevoParrafo);

        // Reemplazar el segundo párrafo por otro
        const reemplazo = document.createElement("p");
        reemplazo.textContent = "Este párrafo ha reemplazado al segundo párrafo.";
        container.replaceChild(reemplazo, document.getElementById("segundoParrafo"));

        // Eliminar el primer párrafo
        const primerParrafo = document.getElementById("primerParrafo");
        container.removeChild(primerParrafo);

        // Verificar si el contenedor tiene nodos hijos
        const tieneHijos = container.hasChildNodes();
        console.log("¿El contenedor tiene nodos hijos?:", tieneHijos);

        // Manipulación de padres y hermanos

        // Obtener el elemento padre
        const padre = nuevoParrafo.parentElement;
        console.log("Elemento padre:", padre);

        // Obtener el nodo padre
        const nodoPadre = nuevoParrafo.parentNode;
        console.log("Nodo padre:", nodoPadre);

        // Obtener los hermanos de un nodo

        // Siguiente hermano (puede ser un nodo de texto)
        const siguienteHermano = nuevoParrafo.nextSibling;
        console.log("Siguiente nodo hermano:", siguienteHermano);

        // Hermano anterior (puede ser un nodo de texto)
        const anteriorHermano = nuevoParrafo.previousSibling;
        console.log("Nodo hermano anterior:", anteriorHermano);

        // Siguiente hermano que es un elemento
        const siguienteElemento = nuevoParrafo.nextElementSibling;
        console.log("Siguiente hermano elemento:", siguienteElemento);

        // Hermano anterior que es un elemento
        const anteriorElemento = nuevoParrafo.previousElementSibling;
        console.log("Hermano elemento anterior:", anteriorElemento);

        // Método closest()
        // Busca el ancestro más cercano con el selector "div"
        const divMasCercano = nuevoParrafo.closest("div");
        console.log("Ancestro más cercano con el selector 'div':", divMasCercano);
    </script>
    "